package com.xiii.libertycity.lac.check.checks.player.exploit;

import com.xiii.libertycity.lac.check.Category;
import com.xiii.libertycity.lac.check.Check;
import com.xiii.libertycity.lac.check.CheckInfo;
import io.github.retrooper.packetevents.event.impl.PacketPlayReceiveEvent;
import io.github.retrooper.packetevents.packettype.PacketType;
import io.github.retrooper.packetevents.packetwrappers.play.in.flying.WrappedPacketInFlying;
import io.github.retrooper.packetevents.packetwrappers.play.in.vehiclemove.WrappedPacketInVehicleMove;
import io.github.retrooper.packetevents.utils.vector.Vector3d;

@CheckInfo(name = "Exploit D", category = Category.PLAYER)
public class ExploitD extends Check {

    public void onPacket(PacketPlayReceiveEvent packet) {
        if (packet.getPacketId() == PacketType.Play.Client.FLYING) {
            WrappedPacketInFlying wrapper = new WrappedPacketInFlying(packet.getNMSPacket());

            if (!wrapper.hasPositionChanged()) return;

            Vector3d location = wrapper.getPosition();
            if (this.containsInvalidValues(location.getX(), location.getY(), location.getZ())) {
                fail("Packet invalid", "p=" + packet);
            }
        } else if (packet.getPacketId() == PacketType.Play.Client.VEHICLE_MOVE) {
            WrappedPacketInVehicleMove wrapper = new WrappedPacketInVehicleMove(packet.getNMSPacket());

            Vector3d position = wrapper.getPosition();
            if (this.containsInvalidValues(position.getX(), position.getY(), position.getZ())) {
                fail("Packet invalid", "p=" + packet);
            }
        }
    }

    private boolean containsInvalidValues(double x, double y, double z) {
        return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
    }
}
